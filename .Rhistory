dir.create(fp)
}
}
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
directory
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
dir.create( file.path(directory, "Tex"), showWarnings = FALSE )
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
template_name
template_name <- gsub(".Rmd", "",template_name)
template_name
invisible ( file.rename(from = list.files(file.path(directory) , full.names = TRUE)[grepl(".Rmd",list.files(file.path(directory), full.names = TRUE))],
to = paste0( file.path(directory, template_name), ".Rmd") ) )
file.edit(paste0( file.path(directory, template_name), ".Rmd"))
#' @title create_template
#' @description builds a template directory  with all the necessary files, as well as a rmarkdown script which is ready to edit.
#' @param directory A character string with the target folder directory This folder will be created if it does not already exist.
#' @param template_name The folder, as well as the rmarkdown template, will be given this name.
#' @param launch_template TRUE by default, this will launch the rmarkdown after creating the directory. The Working directory will also be changed.
#' @return Load message
#' @export
create_template <- function(directory, template_name, bib.location, launch_template) {
library(devtools)
tex.file.root <- "C:/Fairtree/Texevier/inst/Tex"
rmd.file.root <- "C:/Fairtree/Texevier/inst/Template"
# tex.file.root <- system.file("inst/Tex", package = "Texevier")
# rmd.file.root <- system.file("inst/Template", package = "Texevier")
if (missing(directory)) {
directory <- "C:/Template"
}
if (missing(template_name)) {
template_name <- "Template.Rmd"
}
if (exists(file.path(directory)) ) {
answer <- readline(paste0("PROMPT: \n \n Path: ", file.path(directory), " provided already exists. \n Proceed to build in this folder? Type: Y or N...."))
if (answer %in% c("Y","y")) {
mkdirs <- function(fp) {
if (!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
} else {
stop("No Template Created")
}
}
if (!missing(bib.location) && !file.exists(bib.location) ) stop("\n bib file: \n", bib.location," \n does not exist")
# Create and save tex templates:
dir.create( file.path(directory, "Tex"), showWarnings = FALSE )
if( missing(bib.location) ) {
# Fetch and store templates:
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
} else {
bib_name <- unlist(strsplit(bib.location, "/"))[length(unlist(strsplit(bib.location, "/")))]
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE)[!grepl("ref.bib",list.files(file.path(tex.file.root), full.names = TRUE))], to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(bib.location), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
# rename bibfile to conform to template:
invisible ( file.rename(from = list.files(file.path(directory, "Tex") , full.names = TRUE)[grepl(bib_name,list.files(file.path(tex.file.root), full.names = TRUE))],
to = paste0(file.path(directory, "Tex"), "/refs.bib")) )
}
if ( !missing(template_name)) {
template_name <- gsub(".Rmd", "",template_name)
invisible ( file.rename(from = list.files(file.path(directory) , full.names = TRUE)[grepl(".Rmd",list.files(file.path(directory), full.names = TRUE))],
to = paste0( file.path(directory, template_name), ".Rmd") ) )
}
if (launch_template) {
setwd(directory)
library(rmarkdown)
file.edit(paste0( file.path(directory, template_name), ".Rmd"))
cat("Press Cntrl + Shift + K to knit this into a pdf. \n Change the YAML above to change settings.")
}
}
create_template(directory = "C:/Letsgo/test", template_name = "ProjectGo", launch_template = TRUE)
directory = "C:/Letsgo/test"
template_name = "ProjectGo"
launch_template = TRUE)
launch_template = TRUE
library(devtools)
tex.file.root <- "C:/Fairtree/Texevier/inst/Tex"
rmd.file.root <- "C:/Fairtree/Texevier/inst/Template"
# tex.file.root <- system.file("inst/Tex", package = "Texevier")
# rmd.file.root <- system.file("inst/Template", package = "Texevier")
if (missing(directory)) {
directory <- "C:/Template"
}
if (missing(template_name)) {
template_name <- "Template.Rmd"
}
if (exists(file.path(directory)) ) {
answer <- readline(paste0("PROMPT: \n \n Path: ", file.path(directory), " provided already exists. \n Proceed to build in this folder? Type: Y or N...."))
if (answer %in% c("Y","y")) {
mkdirs <- function(fp) {
if (!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
} else {
stop("No Template Created")
}
}
if (!missing(bib.location) && !file.exists(bib.location) ) stop("\n bib file: \n", bib.location," \n does not exist")
# Create and save tex templates:
dir.create( file.path(directory, "Tex"), showWarnings = FALSE )
if( missing(bib.location) ) {
# Fetch and store templates:
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
} else {
bib_name <- unlist(strsplit(bib.location, "/"))[length(unlist(strsplit(bib.location, "/")))]
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE)[!grepl("ref.bib",list.files(file.path(tex.file.root), full.names = TRUE))], to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(bib.location), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
# rename bibfile to conform to template:
invisible ( file.rename(from = list.files(file.path(directory, "Tex") , full.names = TRUE)[grepl(bib_name,list.files(file.path(tex.file.root), full.names = TRUE))],
to = paste0(file.path(directory, "Tex"), "/refs.bib")) )
}
if ( !missing(template_name)) {
template_name <- gsub(".Rmd", "",template_name)
invisible ( file.rename(from = list.files(file.path(directory) , full.names = TRUE)[grepl(".Rmd",list.files(file.path(directory), full.names = TRUE))],
to = paste0( file.path(directory, template_name), ".Rmd") ) )
}
if (launch_template) {
setwd(directory)
library(rmarkdown)
file.edit(paste0( file.path(directory, template_name), ".Rmd"))
cat("Press Cntrl + Shift + K to knit this into a pdf. \n Change the YAML above to change settings.")
}
template_name
template_name <- gsub(".Rmd", "",template_name)
library(devtools)
tex.file.root <- "C:/Fairtree/Texevier/inst/Tex"
rmd.file.root <- "C:/Fairtree/Texevier/inst/Template"
# tex.file.root <- system.file("inst/Tex", package = "Texevier")
# rmd.file.root <- system.file("inst/Template", package = "Texevier")
if (missing(directory)) {
directory <- "C:/Template"
}
if (missing(template_name)) {
template_name <- "Template.Rmd"
}
if (exists(file.path(directory)) ) {
answer <- readline(paste0("PROMPT: \n \n Path: ", file.path(directory), " provided already exists. \n Proceed to build in this folder? Type: Y or N...."))
if (answer %in% c("Y","y")) {
mkdirs <- function(fp) {
if (!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
} else {
stop("No Template Created")
}
}
if (!missing(bib.location) && !file.exists(bib.location) ) stop("\n bib file: \n", bib.location," \n does not exist")
# Create and save tex templates:
dir.create( file.path(directory, "Tex"), showWarnings = FALSE )
if( missing(bib.location) ) {
# Fetch and store templates:
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
} else {
bib_name <- unlist(strsplit(bib.location, "/"))[length(unlist(strsplit(bib.location, "/")))]
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE)[!grepl("ref.bib",list.files(file.path(tex.file.root), full.names = TRUE))], to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(bib.location), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
# rename bibfile to conform to template:
invisible ( file.rename(from = list.files(file.path(directory, "Tex") , full.names = TRUE)[grepl(bib_name,list.files(file.path(tex.file.root), full.names = TRUE))],
to = paste0(file.path(directory, "Tex"), "/refs.bib")) )
}
directory
library(devtools)
tex.file.root <- "C:/Fairtree/Texevier/inst/Tex"
rmd.file.root <- "C:/Fairtree/Texevier/inst/Template"
# tex.file.root <- system.file("inst/Tex", package = "Texevier")
# rmd.file.root <- system.file("inst/Template", package = "Texevier")
if (missing(directory)) {
directory <- "C:/Template"
}
if (missing(template_name)) {
template_name <- "Template.Rmd"
}
if (exists(file.path(directory)) ) {
answer <- readline(paste0("PROMPT: \n \n Path: ", file.path(directory), " provided already exists. \n Proceed to build in this folder? Type: Y or N...."))
if (answer %in% c("Y","y")) {
dir.create(directory, showWarnings = FALSE)
} else {
stop("No Template Created")
}
} else {
mkdirs <- function(fp) {
if (!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
}
#' @title create_template
#' @description builds a template directory  with all the necessary files, as well as a rmarkdown script which is ready to edit.
#' @param directory A character string with the target folder directory This folder will be created if it does not already exist.
#' @param template_name The folder, as well as the rmarkdown template, will be given this name.
#' @param launch_template TRUE by default, this will launch the rmarkdown after creating the directory. The Working directory will also be changed.
#' @return Load message
#' @export
create_template <- function(directory, template_name, bib.location, launch_template) {
library(devtools)
tex.file.root <- "C:/Fairtree/Texevier/inst/Tex"
rmd.file.root <- "C:/Fairtree/Texevier/inst/Template"
# tex.file.root <- system.file("inst/Tex", package = "Texevier")
# rmd.file.root <- system.file("inst/Template", package = "Texevier")
if (missing(directory)) {
directory <- "C:/Template"
}
if (missing(template_name)) {
template_name <- "Template.Rmd"
}
if (exists(file.path(directory)) ) {
answer <- readline(paste0("PROMPT: \n \n Path: ", file.path(directory), " provided already exists. \n Proceed to build in this folder? Type: Y or N...."))
if (answer %in% c("Y","y")) {
dir.create(directory, showWarnings = FALSE)
} else {
stop("No Template Created")
}
} else {
mkdirs <- function(fp) {
if (!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
}
if (!missing(bib.location) && !file.exists(bib.location) ) stop("\n bib file: \n", bib.location," \n does not exist")
# Create and save tex templates:
dir.create( file.path(directory, "Tex"), showWarnings = FALSE )
if( missing(bib.location) ) {
# Fetch and store templates:
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
} else {
bib_name <- unlist(strsplit(bib.location, "/"))[length(unlist(strsplit(bib.location, "/")))]
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE)[!grepl("ref.bib",list.files(file.path(tex.file.root), full.names = TRUE))], to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(bib.location), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
# rename bibfile to conform to template:
invisible ( file.rename(from = list.files(file.path(directory, "Tex") , full.names = TRUE)[grepl(bib_name,list.files(file.path(tex.file.root), full.names = TRUE))],
to = paste0(file.path(directory, "Tex"), "/refs.bib")) )
}
if ( !missing(template_name)) {
template_name <- gsub(".Rmd", "",template_name)
invisible ( file.rename(from = list.files(file.path(directory) , full.names = TRUE)[grepl(".Rmd",list.files(file.path(directory), full.names = TRUE))],
to = paste0( file.path(directory, template_name), ".Rmd") ) )
}
if (launch_template) {
setwd(directory)
library(rmarkdown)
file.edit(paste0( file.path(directory, template_name), ".Rmd"))
cat("Press Cntrl + Shift + K to knit this into a pdf. \n Change the YAML above to change settings.")
}
}
create_template(directory = "C:/Letsgo/test", template_name = "ProjectGo", launch_template = TRUE)
getwd()
library(roxygen2)
roxygenise()
#' @title create_template
#' @description builds a template directory  with all the necessary files, as well as a rmarkdown script which is ready to edit.
#' @param directory A character string with the target folder directory This folder will be created if it does not already exist.
#' @param template_name The folder, as well as the rmarkdown template, will be given this name.
#' @param launch_template TRUE by default, this will launch the rmarkdown after creating the directory. The Working directory will also be changed.
#' @return Load message
#' @examples
#' create_template()
#' @export
create_template <- function(directory, template_name, bib.location, launch_template) {
library(devtools)
tex.file.root <- "C:/Fairtree/Texevier/inst/Tex"
rmd.file.root <- "C:/Fairtree/Texevier/inst/Template"
# tex.file.root <- system.file("inst/Tex", package = "Texevier")
# rmd.file.root <- system.file("inst/Template", package = "Texevier")
if (missing(directory)) {
directory <- "C:/Template"
}
if (missing(template_name)) {
template_name <- "Template.Rmd"
}
if (exists(file.path(directory)) ) {
answer <- readline(paste0("PROMPT: \n \n Path: ", file.path(directory), " provided already exists. \n Proceed to build in this folder? Type: Y or N...."))
if (answer %in% c("Y","y")) {
dir.create(directory, showWarnings = FALSE)
} else {
stop("No Template Created")
}
} else {
mkdirs <- function(fp) {
if (!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
invisible(
ifelse(!dir.exists(file.path(directory)), mkdirs(directory), FALSE)
)
}
if (!missing(bib.location) && !file.exists(bib.location) ) stop("\n bib file: \n", bib.location," \n does not exist")
# Create and save tex templates:
dir.create( file.path(directory, "Tex"), showWarnings = FALSE )
if( missing(bib.location) ) {
# Fetch and store templates:
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
} else {
bib_name <- unlist(strsplit(bib.location, "/"))[length(unlist(strsplit(bib.location, "/")))]
invisible ( file.copy ( list.files(file.path(tex.file.root), full.names = TRUE)[!grepl("ref.bib",list.files(file.path(tex.file.root), full.names = TRUE))], to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(bib.location), full.names = TRUE), to = file.path(directory, "Tex") ) )
invisible ( file.copy ( list.files(file.path(rmd.file.root), full.names = TRUE), to = file.path(directory) ) )
# rename bibfile to conform to template:
invisible ( file.rename(from = list.files(file.path(directory, "Tex") , full.names = TRUE)[grepl(bib_name,list.files(file.path(tex.file.root), full.names = TRUE))],
to = paste0(file.path(directory, "Tex"), "/refs.bib")) )
}
if ( !missing(template_name)) {
template_name <- gsub(".Rmd", "",template_name)
invisible ( file.rename(from = list.files(file.path(directory) , full.names = TRUE)[grepl(".Rmd",list.files(file.path(directory), full.names = TRUE))],
to = paste0( file.path(directory, template_name), ".Rmd") ) )
}
if (launch_template) {
setwd(directory)
library(rmarkdown)
file.edit(paste0( file.path(directory, template_name), ".Rmd"))
cat("Press Cntrl + Shift + K to knit this into a pdf. \n Change the YAML above to change settings.")
}
}
library(Texevier)
?mutate
library(dplyr)
create_template("C:/AAAATemp", "Project1")
library(Texevier)
create_template("C:/AAAATemp", "Project1")
getwd()
?create_template
library(Texevier)
?create_template
roxygen2::roxygenise()
roxygen2::roxygenise()
file.create("Letsgo.Rproj")
shell.exec("Letsgo.Rproj")
?Rscript
Rscript
Rscript()
.rs.restartR()
paste0(template_name, ".Pdf")
library(Texevier)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Texevier)
create_template("C:/AATemp", "test")
roxygen2::roxygenise()
library(Texevier)
create_template("C:/AATemp", "letsgo")
roxygen2::roxygenise()
library(Texevier)
create_template("C:/AATemp", "letsgo")
create_template("C:/AAAsTemp", "letsgo")
roxygen2::roxygenise()
library(Texevier)
create_template("C:/aaTest", "booya")
getwd()
roxygen2::roxygenise()
library(Texevier)
create_template("C:/aaTest", "booya")
roxygen2::roxygenise()
create_template("C:/aaTest", "booya")
library(Texevier)
library(Texevier)
create_template("C:/aaTest", "booya")
WD
WD <- getwd()
WD
directory
directory <- "C:/aaTest"
setwd(directory)
rmarkdown::render( paste0( file.path(directory, template_name), ".Rmd"),
output_format = "pdf_document",
output_dir = directory,
output_file = paste0(template_name, ".Pdf"),
envir = new.env())
template_name <- "booya.Rmd"
setwd(directory)
rmarkdown::render( paste0( file.path(directory, template_name), ".Rmd"),
output_format = "pdf_document",
output_dir = directory,
output_file = paste0(template_name, ".Pdf"),
envir = new.env())
template_name <- "booya"
rmarkdown::render( paste0( file.path(directory, template_name), ".Rmd"),
output_format = "pdf_document",
output_dir = directory,
output_file = paste0(template_name, ".Pdf"),
envir = new.env())
rmarkdown::render( paste0( file.path(directory, template_name), ".Rmd"),
output_format = "pdf_document",
output_dir = directory,
output_file = paste0(template_name, ".Pdf"),
envir = new.env())
getwd()
setwd(directory)
rmarkdown::render( paste0( file.path(directory, template_name), ".Rmd"),
output_format = "pdf_document",
output_dir = directory,
output_file = paste0(template_name, ".Pdf"),
envir = new.env())
paste0( file.path(directory, template_name), ".Rmd")
directory
rmarkdown::render( paste0( file.path(directory, template_name), ".Rmd"),
output_format = "pdf_document",
envir = new.env())
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Texevier)
roxygen2::roxygenise()
library(Texevier)
create_template("C:/teet", "totr")
roxygen2::roxygenise()
library(Texevier)
create_template("C:/aaju", "jeu")
roxygen2::roxygenise()
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Texevier)
create_template("C:/aaatte", "Letsgo")
roxygen2::roxygenise()
library(Texevier)
library(Texevier)
create_template("C:/Temp", "Temp")
library(Texevier)
create_template("C:/aaj", "odn")
create_template("C:/aaj", "odn")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Texevier)
create_template("C:/Ahh", "aaah")
cite("Texevier")
citation()
citation("Texevier")
?Texevier
library(Texevier)
?Texevier
Texevier
library(Texevier)
roxygen2::roxygenise()
library(Texevier)
create_template("C:/tt","gooo")
cite("Texevier")
citation("Texevier")
roxygen2::roxygenise()
library(Texevier)
citation("Texevier")
roxygen2::roxygenise()
library(Texevier)
citation("Texevier")
roxygen2::roxygenise()
library(Texevier)
citation("Texevier")
roxygen2::roxygenise()
library(Texevier)
citation("Texevier")
roxygen2::roxygenise()
library(Texevier)
library(Texevier)
citation("Texevier")
roxygen2::roxygenise()
library(Texevier)
create_template("C:/tt","gooo")
roxygen2::roxygenise()
library(Texevier)
library(Texevier)
create_template("C:/TT", "Go")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Texevier)
devtools::use_readme_rmd()
roxygen2::roxygenise()
library(Texevier)
devtools::use_readme_rmd()
use_readme_rmd()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::use_readme_rmd()
roxygen2::roxygenise()
library(Texevier)
library(Texevier)
